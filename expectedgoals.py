# -*- coding: utf-8 -*-
"""expectedGoals.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16V5SN0AYS3w-wqFWQSIGVMnPcS47bgw-
"""

#import libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import accuracy_score,roc_curve, roc_auc_score, precision_score, recall_score, precision_recall_curve
from sklearn.metrics import f1_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

#read in data
data = pd.read_csv("/content/shots_2021.csv")

#drop empty net shots
data2 = data.drop(data.loc[data['shotOnEmptyNet']==1].index)

#prepare data for exploration
data3 = data2.loc[:,['goal','shotType','arenaAdjustedShotDistance','shotAngleAdjusted','offWing','timeSinceLastEvent','distanceFromLastEvent']]

#drop null values
data4 = data3.dropna(axis=0)

#categorize shotType values
data5 = data4.replace(['WRIST','BACK','SLAP','SNAP','TIP','WRAP','DEFL'],[0,1,2,3,4,5,6])

#prepare data for feature evaluation graph
data6 = data5.loc[:,['shotType','arenaAdjustedShotDistance','shotAngleAdjusted','offWing','timeSinceLastEvent','distanceFromLastEvent']]

data3.head()

#take first 1000 rows for data exploration
first1000 = data3.loc[0:1000,:]

shotBins = [0,20,40,60,np.inf]
group_names=['0-20','20-40','40-60','60+']
first1000['distance']=pd.cut(first1000['arenaAdjustedShotDistance'],shotBins,labels=group_names)

angleBins = [0,15,30,45,60,75,90]
group_names=['0-15','15-30','30-45','45-60','60-75','75-90']
first1000['angle']=pd.cut(first1000['shotAngleAdjusted'],angleBins,labels=group_names)

timeSinceLastEventBins = [0,3,6,9,12,15,18,np.inf]
group_names=['0-3','3-6','6-9','9-12','12-15','15-18','18+']
first1000['time']=pd.cut(first1000['timeSinceLastEvent'],timeSinceLastEventBins,labels=group_names)

distanceFromLastEventBins = [0,5,10,15,20,25,30,np.inf]
group_names=['0-5','5-10','10-15','15-20','20-25','25-30','30+']
first1000['distanceFrom']=pd.cut(first1000['distanceFromLastEvent'],distanceFromLastEventBins,labels=group_names)

shotTypeTable=pd.crosstab(first1000.shotType,first1000.goal)
shotTypeTable.div(shotTypeTable.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Shot Type vs If Goal Was Scored')
plt.xlabel('Shot Type')
plt.ylabel('Proportion of Goals')
plt.legend(["No Goal",'Goal'],loc="lower right")

offWingTable=pd.crosstab(first1000.offWing,first1000.goal)
offWingTable.div(offWingTable.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Shot Taken on Off Wing vs If Goal Was Scored')
plt.xlabel('Off Wing')
plt.ylabel('Proportion of Goals')
plt.legend(["No Goal",'Goal'])

distanceTable=pd.crosstab(first1000.distance,first1000.goal)
distanceTable.div(distanceTable.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Shot Distance vs If Goal Was Scored')
plt.xlabel('Shot Distance')
plt.ylabel('Proportion of Goals')
plt.legend(["No Goal",'Goal'],loc="lower right")

angleTable=pd.crosstab(first1000.angle,first1000.goal)
angleTable.div(angleTable.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Shot Angle vs If Goal Was Scored')
plt.xlabel('Shot Angle Adjusted')
plt.ylabel('Proportion of Goals')
plt.legend(["No Goal",'Goal'],loc="lower right")

timeTable=pd.crosstab(first1000.time,first1000.goal)
timeTable.div(timeTable.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Time Since Last Event vs If Goal Was Scored')
plt.xlabel('Time Since Last Event')
plt.ylabel('Proportion of Goals')
plt.legend(["No Goal",'Goal'],loc="lower right")

distanceFromTable=pd.crosstab(first1000.distanceFrom,first1000.goal)
distanceFromTable.div(distanceFromTable.sum(1).astype(float), axis=0).plot(kind='bar', stacked=True)
plt.title('Distance From Last Event vs If Goal Was Scored')
plt.xlabel('Distance From Last Event')
plt.ylabel('Proportion of Goals')
plt.legend(["No Goal",'Goal'],loc="lower right")

#split data
train = data5.loc[:,['shotType','arenaAdjustedShotDistance','shotAngleAdjusted','offWing','timeSinceLastEvent','distanceFromLastEvent']]
test = data5['goal']

sns.countplot(x="goal", data = data, color='blue')

X_train,X_test,Y_train,y_test = train_test_split(train, test, test_size = 0.3, random_state=42)

weights = {0:1.0, 1:11.0}
regr = LogisticRegression(solver='lbfgs', class_weight=weights)

regr.fit(X_train,Y_train)

y_pred = regr.predict(X_test)
y_prob = regr.predict_proba(X_test)

print(f'We predicted correctly: {accuracy_score(y_test,y_pred)}')
print(f'Out of all goals scored we predicted: {recall_score(y_test,y_pred)}')

cm = confusion_matrix(y_test,y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot()
plt.show()

importance = regr.coef_.flatten()

plt.rcParams["figure.figsize"] = (5,5)
plt.barh(data6.columns,importance, color = "blue")

#shape data for graph
yprob = y_prob[:,1]

fpr, tpr, _ = metrics.roc_curve(y_test,  yprob)
auc = metrics.roc_auc_score(y_test, yprob)
x = np.linspace(0,1,100)
y = x

#create ROC curve
plt.plot(fpr,tpr,label="AUC="+str(auc),color="orange")
plt.plot(x,y,'--', color = 'blue')
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.legend(loc=4)
plt.show()
